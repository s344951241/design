1.状态模式
	--状态拥有管理类，管理类拥有状态基类，通过管理类执行状态类的函数来切换状态

2.外观模式
	--管理类,管理子系统(总管理)

3.单例模式
	--一个游戏都用，真傻逼

4.中介者模式
	--各个系统互相交流，都通过中介者来交流

5.桥接模式
	--抽象调用抽象，实现具体变更，由传递过来的抽象完成功能

6.策略模式
	--解决一个问题不同的方式

7.模板方法模式
	--抽象一个行为流程的方法

8.工厂模式
    --一个方法创建不同对象；抽象方法创建对象

9.建造者模式
	--零部件生产（已混乱）[构建流程，相同的流程，不同的零件]

10.享元模式
	--共享某个对象(跟工厂模式组合使用,管理共享属性，创建共享属性)

11.组合模式
	--树

12.命令模式
	--一个命令的集合，命令作为参数添加命令，命令集合去执行命令自己的方法

13.责任链模式
	--我解决不了的问题，我来让下一个人处理

14.观察者模式
	--好乱。。。

15.备忘录模式
	--保存数据，恢复数据

16.访问者模式
	--已经看不懂了

17.适配器模式
	--继承A并传入B，来让B适配A

18.代理模式
	--类上套一层类，包装一下0000

switch 两次tab建（回车）

MonoBehaviour有一个Invoke方法：过多长时间执行一个方法

window-lighting-setting里的auto Generate设置取消，使场景一直是亮的

get方法也是可以重写的：
 public abstract int Lv { get; }

加载： return Resources.Load(SpritePath + name, typeof(AudioClip)) as AudioClip

ToString("0.0")小数点保留

导航网格Navgation static 加入cube辅助生成然后删掉

 Mathf.Min(a,b)取最小值

Convert.ToInt32(object)转int
